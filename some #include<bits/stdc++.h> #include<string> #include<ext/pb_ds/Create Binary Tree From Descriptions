/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& v){
                ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(0);

        int root=-1;
        int freq[100005];
        memset(freq,0,sizeof freq);
        map<int,TreeNode*>m;
        for(int i=0;i<v.size();i++){
            TreeNode* a=new TreeNode(v[i][0]);
            m[v[i][0]]=a;
            freq[v[i][1]]++;
        }
        for(int i=0;i<v.size();i++){
            
              if(freq[v[i][0]]==0){
                root=v[i][0];
              }
             TreeNode* a=m[v[i][0]];
             if(v[i][2]==1){
                if(m[v[i][1]]){
                     TreeNode* b=m[v[i][1]];
                     a->left=b;
                }
                else{
                     TreeNode* b=new TreeNode(v[i][1]);
                     a->left=b;
                }
             }
             else{
                 if(m[v[i][1]]){
                     TreeNode* b=m[v[i][1]];
                     a->right=b;
                }
                else{
                     TreeNode* b=new TreeNode(v[i][1]);
                     a->right=b;
                }
             }
        }
        cout<<root<<" ";
        return m[root];
    }
};
